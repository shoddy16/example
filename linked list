# class Node:
#     def __init__(self, value):
#         self.value = value
#         self.next = None
        

# class LinkedList:
#     def __init__(self, value):
#         new_node = Node(value)
#         self.head = new_node
#         self.tail = new_node
#         self.length = 1

#     def print_list(self):
#         temp = self.head
#         while temp is not None:
#             print(temp.value)
#             temp = temp.next
            
#     def make_empty(self):
#         self.head = None
#         self.tail = None
#         self.length = 0
        
#     def append(self, value):
#         new_node = Node(value)
#         if self.head is None:
#             self.head=new_node
#             self.tail=new_node
#         else:
#            self.tail.next=new_node
#            self.tail=new_node

        
#         self.length += 1




# my_linked_list = LinkedList(1)
# my_linked_list.make_empty()

# my_linked_list.append(1)
# my_linked_list.append(2)

# print('Head:', my_linked_list.head.value)
# print('Tail:', my_linked_list.tail.value)
# print('Length:', my_linked_list.length, '\n')

# print('Linked List:')
# my_linked_list.print_list()



# """
#     EXPECTED OUTPUT:
#     ----------------
#     Head: 1
#     Tail: 2
#     Length: 2 

#     Linked List:
#     1
#     2
    
# """



class Node:
  def __init__(self,value):
    self.value=value
    self.next=None

class LinkedList:
  def __init__(self,value):  
    new_node=Node(value)
    self.head=new_node
    self.tail=new_node
    self.length=1

  def print_items(self):
    temp=self.head
    while temp is not None:
      print (temp.value) 
      temp=temp.next 


  def make_empty(self):
    self.head=None
    self.tail=None
    self.length=0    

  def append(self,value):
    new_node=Node(value)
    if self.head is None:
      self.head=new_node
      self.tail=new_node
    else:
      self.tail.next=new_node
      self.tail=new_node  

    self.length +=1  


  def pop(self):
    if self.length==0:
      return None
    temp=self.head
    pre=self.head
    while temp.next is not None:
      pre=temp
      temp=temp.next
    self.tail=pre
    self.tail.next=None
    self.length-=1
    if self.length==0:
      self.head=None
      self.tail=None
    return temp     


  def prepend(self,value):
    new_node=Node(value)
    if self.length==0:
      self.head=new_node
      self.tail=new_node
    else:
      new_node.next=self.head
      self.head=new_node
      self.length+=1

  def pop_first(self):
    if self.length==0:
      return None
    temp=self.head
    self.head=self.head.next
    temp.next=None
    self.length-=1
    if self.length==0:
      self.tail=None
    return temp  
  

  def get(self, index):
        if index < 0 or index >= self.length:
            return None
        temp = self.head
        for _ in range(index):
            temp = temp.next
        return temp
        
  def set_value(self,index,value):
        temp=self.get(index)
        if temp:
            temp.value=value
            return True
        return False   
  

  
  def insert(self,index,value):
        if index<0 or index>self.length:
            return False
        if index==0:
            return self.prepend(value)
        if index==self.length:
            return self.append(value)
        new_node=Node(value)    
        temp=self.get(index-1)
        new_node.next=temp.next
        temp.next=new_node
        self.length+=1
        return True
  
  def remove(self,index):
     if index==0 or index>=self.length:
        return None
     if index==0:
        return self.pop_first()
     if index==self.length-1:
        return self.pop()
     temp=self.get(index-1)
     pre=temp.next
     pre.next=None
     temp.next=pre.next  
     self.length-=1
     return pre
  
  def reverse(self):
     temp=self.head
     self.head=self.tail
     self.tail=temp

     after=temp.next
     before=None
     while temp:
        after=temp.next
        temp.next=before
        before=temp
        temp=after


ll=LinkedList(1)
ll.make_empty()
ll.append(455)
ll.append(2)
ll.append(3)
ll.append(67)
ll.append(45)
# ll.pop()
# ll.prepend(0)
# ll.pop_first()
# ll.insert(1,476)
# ll.insert(3,56)
# ll.remove(1)
ll.reverse()
# print(ll.get(2))

# ll.set_value(2,89)



print('head:', ll.head.value)
print('tail:', ll.tail.value)
print('length:', ll.length )


print('linked list:')
ll.print_items()
